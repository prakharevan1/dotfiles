.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Async::Future 3pm"
.TH IO::Async::Future 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"IO::Async::Future" \- use Future with IO::Async
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&   use Future::AsyncAwait;
\&   use IO::Async::Loop;
\&
\&   my $loop = IO::Async::Loop\->new;
\&
\&   my $future = $loop\->new_future;
\&
\&   $loop\->watch_time( after => 3, code => sub { $future\->done( "Done" ) } );
\&
\&   print await( $future ), "\en";
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This subclass of Future stores a reference to the IO::Async::Loop
instance that created it, allowing the \f(CW\*(C`await\*(C'\fR method to block until the
Future is ready. These objects should not be constructed directly; instead
the \f(CW\*(C`new_future\*(C'\fR method on the containing Loop should be used.
.PP
For a full description on how to use Futures, see the Future documentation.
.SH CONSTRUCTORS
.IX Header "CONSTRUCTORS"
New \f(CW\*(C`IO::Async::Future\*(C'\fR objects should be constructed by using the following
methods on the \f(CW\*(C`Loop\*(C'\fR. For more detail see the IO::Async::Loop
documentation.
.PP
.Vb 1
\&   $future = $loop\->new_future;
.Ve
.PP
Returns a new pending Future.
.PP
.Vb 1
\&   $future = $loop\->delay_future( %args );
.Ve
.PP
Returns a new Future that will become done at a given time.
.PP
.Vb 1
\&   $future = $loop\->timeout_future( %args );
.Ve
.PP
Returns a new Future that will become failed at a given time.
.SH METHODS
.IX Header "METHODS"
.SS loop
.IX Subsection "loop"
.Vb 1
\&   $loop = $future\->loop;
.Ve
.PP
Returns the underlying IO::Async::Loop object.
.SS done_later
.IX Subsection "done_later"
.Vb 1
\&   $future\->done_later( @result );
.Ve
.PP
A shortcut to calling the \f(CW\*(C`done\*(C'\fR method in a \f(CW\*(C`later\*(C'\fR idle watch on the
underlying Loop object. Ensures that a returned Future object is not ready
immediately, but will wait for the next IO round.
.PP
Like \f(CW\*(C`done\*(C'\fR, returns \f(CW$future\fR itself to allow easy chaining.
.SS fail_later
.IX Subsection "fail_later"
.Vb 1
\&   $future\->fail_later( $exception, @details );
.Ve
.PP
A shortcut to calling the \f(CW\*(C`fail\*(C'\fR method in a \f(CW\*(C`later\*(C'\fR idle watch on the
underlying Loop object. Ensures that a returned Future object is not ready
immediately, but will wait for the next IO round.
.PP
Like \f(CW\*(C`fail\*(C'\fR, returns \f(CW$future\fR itself to allow easy chaining.
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
