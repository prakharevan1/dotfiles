.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Future::Exception 3pm"
.TH Future::Exception 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"Future::Exception" \- an exception type for failed Futures
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&   use Scalar::Util qw( blessed );
\&   use Syntax::Keyword::Try;
\&
\&   try {
\&      my $f = ...;
\&      my @result = $f\->result;
\&      ...
\&   }
\&   catch {
\&      if( blessed($@) and $@\->isa( "Future::Exception" ) {
\&         print STDERR "The ", $@\->category, " failed: ", $@\->message, "\en";
\&      }
\&   }
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
The \f(CW\*(C`get\*(C'\fR method on a failed Future instance will throw an exception to
indicate that the future failed. A failed future can contain a failure
category name and other details as well as the failure message, so in this
case the exception will be an instance of \f(CW\*(C`Future::Exception\*(C'\fR to make these
values accessible.
.PP
Users should not depend on exact class name matches, but instead rely on
inheritence, as a later version of this implementation might dynamically
create subclasses whose names are derived from the Future failure category
string, to assist with type matching. Note the use of \f(CW\*(C`\->isa\*(C'\fR in the
SYNOPSIS example.
.SH CONSTRUCTOR
.IX Header "CONSTRUCTOR"
.SS from_future
.IX Subsection "from_future"
.Vb 1
\&   $e = Future::Exception\->from_future( $f );
.Ve
.PP
Constructs a new \f(CW\*(C`Future::Exception\*(C'\fR wrapping the given failed future.
.SH ACCESSORS
.IX Header "ACCESSORS"
.Vb 3
\&   $message  = $e\->message;
\&   $category = $e\->category;
\&   @details  = $e\->details;
.Ve
.PP
Additionally, the object will stringify to return the message value, for the
common use-case of printing, regexp testing, or other behaviours.
.SH METHODS
.IX Header "METHODS"
.SS throw
.IX Subsection "throw"
.Vb 1
\&   Future::Exception\->throw( $message, $category, @details );
.Ve
.PP
\&\fISince version 0.41.\fR
.PP
Constructs a new exception object and throws it using \f(CWdie()\fR. This method
will not return, as it raises the exception directly.
.PP
If \f(CW$message\fR does not end in a linefeed then the calling file and line
number are appended to it, in the same way \f(CWdie()\fR does.
.SS as_future
.IX Subsection "as_future"
.Vb 1
\&   $f = $e\->as_future;
.Ve
.PP
Returns a new \f(CW\*(C`Future\*(C'\fR object in a failed state matching the exception.
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
