.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Async::Signal 3pm"
.TH IO::Async::Signal 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"IO::Async::Signal" \- event callback on receipt of a POSIX signal
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&   use IO::Async::Signal;
\&
\&   use IO::Async::Loop;
\&   my $loop = IO::Async::Loop\->new;
\&
\&   my $signal = IO::Async::Signal\->new(
\&      name => "HUP",
\&
\&      on_receipt => sub {
\&          print "I caught SIGHUP\en";
\&      },
\&   );
\&
\&   $loop\->add( $signal );
\&
\&   $loop\->run;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This subclass of IO::Async::Notifier invokes its callback when a particular
POSIX signal is received.
.PP
Multiple objects can be added to a \f(CW\*(C`Loop\*(C'\fR that all watch for the same signal.
The callback functions will all be invoked, in no particular order.
.SH EVENTS
.IX Header "EVENTS"
The following events are invoked, either using subclass methods or CODE
references in parameters:
.SS on_receipt
.IX Subsection "on_receipt"
Invoked when the signal is received.
.SH PARAMETERS
.IX Header "PARAMETERS"
The following named parameters may be passed to \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`configure\*(C'\fR:
.SS "name => STRING"
.IX Subsection "name => STRING"
The name of the signal to watch. This should be a bare name like \f(CW\*(C`TERM\*(C'\fR. Can
only be given at construction time.
.SS "on_receipt => CODE"
.IX Subsection "on_receipt => CODE"
CODE reference for the \f(CW\*(C`on_receipt\*(C'\fR event.
.PP
Once constructed, the \f(CW\*(C`Signal\*(C'\fR will need to be added to the \f(CW\*(C`Loop\*(C'\fR before it
will work.
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
