.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Async::PID 3pm"
.TH IO::Async::PID 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"IO::Async::PID" \- event callback on exit of a child process
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 2
\&   use IO::Async::PID;
\&   use POSIX qw( WEXITSTATUS );
\&
\&   use IO::Async::Loop;
\&   my $loop = IO::Async::Loop\->new;
\&
\&   my $kid = $loop\->fork(
\&      code => sub {
\&         print "Child sleeping..\en";
\&         sleep 10;
\&         print "Child exiting\en";
\&         return 20;
\&      },
\&   );
\&
\&   print "Child process $kid started\en";
\&
\&   my $pid = IO::Async::PID\->new(
\&      pid => $kid,
\&
\&      on_exit => sub {
\&         my ( $self, $exitcode ) = @_;
\&         printf "Child process %d exited with status %d\en",
\&            $self\->pid, WEXITSTATUS($exitcode);
\&      },
\&   );
\&
\&   $loop\->add( $pid );
\&
\&   $loop\->run;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This subclass of IO::Async::Notifier invokes its callback when a process
exits.
.PP
For most use cases, a IO::Async::Process object provides more control of
setting up the process, connecting filehandles to it, sending data to and
receiving data from it.
.SH EVENTS
.IX Header "EVENTS"
The following events are invoked, either using subclass methods or CODE
references in parameters:
.ie n .SS "on_exit $exitcode"
.el .SS "on_exit \f(CW$exitcode\fP"
.IX Subsection "on_exit $exitcode"
Invoked when the watched process exits.
.SH PARAMETERS
.IX Header "PARAMETERS"
The following named parameters may be passed to \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`configure\*(C'\fR:
.SS "pid => INT"
.IX Subsection "pid => INT"
The process ID to watch. Must be given before the object has been added to the
containing IO::Async::Loop object.
.SS "on_exit => CODE"
.IX Subsection "on_exit => CODE"
CODE reference for the \f(CW\*(C`on_exit\*(C'\fR event.
.PP
Once the \f(CW\*(C`on_exit\*(C'\fR continuation has been invoked, the \f(CW\*(C`IO::Async::PID\*(C'\fR
object is removed from the containing IO::Async::Loop object.
.SH METHODS
.IX Header "METHODS"
.SS pid
.IX Subsection "pid"
.Vb 1
\&   $process_id = $pid\->pid;
.Ve
.PP
Returns the underlying process ID
.SS kill
.IX Subsection "kill"
.Vb 1
\&   $pid\->kill( $signal );
.Ve
.PP
Sends a signal to the process
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
