.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::Future::Deferred 3pm"
.TH Test::Future::Deferred 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"Test::Future::Deferred" \- a future which completes later
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&   my $future = Test::Future::Deferred\->done_later( 1, 2, 3 );
\&
\&   # Future is not ready yet
\&
\&   my @result = $future\->get;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This subclass of Future provides two new methods and an implementation of
the \f(CW\*(C`await\*(C'\fR interface, which allows the futures to appear pending at first,
but then to complete when \f(CW\*(C`get\*(C'\fR is called at the toplevel on one of them.
.PP
This behaviour is useful in unit tests to check that behaviour of a module
under test is correct even with non-immediate futures, as it allows a future
to easily be constructed that will complete "soon", but not yet, without
needing an event loop.
.PP
Because these futures provide their own \f(CW\*(C`await\*(C'\fR method, they shouldn't be
mixed in the same program with other kinds of futures from real event systems
or similar.
.SH METHODS
.IX Header "METHODS"
.SS done_later
.IX Subsection "done_later"
.Vb 1
\&   $f\->done_later( @args );
.Ve
.PP
Equivalent to invoking the regular \f(CW\*(C`done\*(C'\fR method as part of the \f(CW\*(C`await\*(C'\fR
operation called on the toplevel future. This makes the future complete with
the given result, but only when \f(CW\*(C`get\*(C'\fR is called.
.SS fail_later
.IX Subsection "fail_later"
.Vb 1
\&   $f\->fail_later( $message, $category, @details );
.Ve
.PP
Equivalent to invoking the regular \f(CW\*(C`fail\*(C'\fR method as part of the \f(CW\*(C`await\*(C'\fR
operation called on the toplevel future. This makes the future complete with
the given failure, but only when \f(CW\*(C`get\*(C'\fR is called. As the \f(CW\*(C`failure\*(C'\fR method
also waits for completion of the future, then it will return the failure
message given here also.
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
