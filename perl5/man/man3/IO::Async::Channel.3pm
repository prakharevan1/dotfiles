.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Async::Channel 3pm"
.TH IO::Async::Channel 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"IO::Async::Channel" \- pass values into or out from an IO::Async::Routine
.SH DESCRIPTION
.IX Header "DESCRIPTION"
A \f(CW\*(C`IO::Async::Channel\*(C'\fR object allows Perl values to be passed into or out of
an IO::Async::Routine. It is intended to be used primarily with a Routine
object rather than independently. For more detail and examples on how to use
this object see also the documentation for IO::Async::Routine.
.PP
A Channel object is shared between the main process of the program and the
process running within the Routine. In the main process it will be used in
asynchronous mode, and in the Routine process it will be used in synchronous
mode. In asynchronous mode all methods return immediately and use
IO::Async\-style futures or callback functions. In synchronous within the
Routine process the methods block until they are ready and may be used for
flow-control within the routine. Alternatively, a Channel may be shared
between two different Routine objects, and not used directly by the
controlling program.
.PP
The channel itself represents a FIFO of Perl reference values. New values may
be put into the channel by the \f(CW\*(C`send\*(C'\fR method in either mode. Values may be
retrieved from it by the \f(CW\*(C`recv\*(C'\fR method. Values inserted into the Channel are
snapshot by the \f(CW\*(C`send\*(C'\fR method. Any changes to referred variables will not be
observed by the other end of the Channel after the \f(CW\*(C`send\*(C'\fR method returns.
.SH PARAMETERS
.IX Header "PARAMETERS"
The following named parameters may be passed to \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`configure\*(C'\fR:
.SS "codec => STR"
.IX Subsection "codec => STR"
Gives the name of the encoding method used to represent values over the
channel.
.PP
This can be set to \f(CW\*(C`Storable\*(C'\fR to use the core Storable module. As this
only supports references, to pass a single scalar value, \f(CW\*(C`send\*(C'\fR a SCALAR
reference to it, and dereference the result of \f(CW\*(C`recv\*(C'\fR.
.PP
If the Sereal::Encoder and Sereal::Decoder modules are installed, this
can be set to \f(CW\*(C`Sereal\*(C'\fR instead, and will use those to perform the encoding
and decoding. This optional dependency may give higher performance than using
\&\f(CW\*(C`Storable\*(C'\fR. If these modules are available, then this option is picked by
default.
.SH CONSTRUCTOR
.IX Header "CONSTRUCTOR"
.SS new
.IX Subsection "new"
.Vb 1
\&   $channel = IO::Async::Channel\->new;
.Ve
.PP
Returns a new \f(CW\*(C`IO::Async::Channel\*(C'\fR object. This object reference itself
should be shared by both sides of a \f(CWfork()\fRed process. After \f(CWfork()\fR the
two \f(CW\*(C`setup_*\*(C'\fR methods may be used to configure the object for operation on
either end.
.PP
While this object does in fact inherit from IO::Async::Notifier, it should
not be added to a Loop object directly; event management will be handled by
its containing IO::Async::Routine object.
.SH METHODS
.IX Header "METHODS"
The following methods documented in \f(CW\*(C`await\*(C'\fR expressions return Future
instances.
.SS configure
.IX Subsection "configure"
.Vb 1
\&   $channel\->configure( %params );
.Ve
.PP
Similar to the standard \f(CW\*(C`configure\*(C'\fR method on IO::Async::Notifier, this is
used to change details of the Channel's operation.
.IP "on_recv => CODE" 4
.IX Item "on_recv => CODE"
May only be set on an async mode channel. If present, will be invoked whenever
a new value is received, rather than using the \f(CW\*(C`recv\*(C'\fR method.
.Sp
.Vb 1
\&   $on_recv\->( $channel, $data );
.Ve
.IP "on_eof => CODE" 4
.IX Item "on_eof => CODE"
May only be set on an async mode channel. If present, will be invoked when the
channel gets closed by the peer.
.Sp
.Vb 1
\&   $on_eof\->( $channel );
.Ve
.SS send
.IX Subsection "send"
.Vb 1
\&   $channel\->send( $data );
.Ve
.PP
Pushes the data stored in the given Perl reference into the FIFO of the
Channel, where it can be received by the other end. When called on a
synchronous mode Channel this method may block if a \f(CWwrite()\fR call on the
underlying filehandle blocks. When called on an asynchronous mode channel this
method will not block.
.SS send_encoded
.IX Subsection "send_encoded"
.Vb 1
\&   $channel\->send_encoded( $record );
.Ve
.PP
A variant of the \f(CW\*(C`send\*(C'\fR method; this method pushes the byte record given.
This should be the result of a call to \f(CW\*(C`encode\*(C'\fR.
.SS encode
.IX Subsection "encode"
.Vb 1
\&   $record = $channel\->encode( $data );
.Ve
.PP
Takes a Perl reference and returns a serialised string that can be passed to
\&\f(CW\*(C`send_encoded\*(C'\fR. The following two forms are equivalent
.PP
.Vb 2
\&   $channel\->send( $data );
\&   $channel\->send_encoded( $channel\->encode( $data ) );
.Ve
.PP
This is provided for the use-case where data needs to be serialised into a
fixed string to "snapshot it" but not sent yet; the returned string can be
saved and sent at a later time.
.PP
.Vb 1
\&   $record = IO::Async::Channel\->encode( $data );
.Ve
.PP
This can also be used as a class method, in case it is inconvenient to operate
on a particular object instance, or when one does not exist yet. In this case
it will encode using whatever is the default codec for \f(CW\*(C`IO::Async::Channel\*(C'\fR.
.SS recv
.IX Subsection "recv"
.Vb 1
\&   $data = $channel\->recv;
.Ve
.PP
When called on a synchronous mode Channel this method will block until a Perl
reference value is available from the other end and then return it. If the
Channel is closed this method will return \f(CW\*(C`undef\*(C'\fR. Since only references may
be passed and all Perl references are true the truth of the result of this
method can be used to detect that the channel is still open and has not yet
been closed.
.PP
.Vb 1
\&   $data = await $channel\->recv;
.Ve
.PP
When called on an asynchronous mode Channel this method returns a future which
will eventually yield the next Perl reference value that becomes available
from the other end. If the Channel is closed, the future will fail with an
\&\f(CW\*(C`eof\*(C'\fR failure.
.PP
.Vb 1
\&   $channel\->recv( %args );
.Ve
.PP
When not returning a future, takes the following named arguments:
.IP "on_recv => CODE" 8
.IX Item "on_recv => CODE"
Called when a new Perl reference value is available. Will be passed the
Channel object and the reference data.
.Sp
.Vb 1
\&   $on_recv\->( $channel, $data );
.Ve
.IP "on_eof => CODE" 8
.IX Item "on_eof => CODE"
Called if the Channel was closed before a new value was ready. Will be passed
the Channel object.
.Sp
.Vb 1
\&   $on_eof\->( $channel );
.Ve
.SS close
.IX Subsection "close"
.Vb 1
\&   $channel\->close;
.Ve
.PP
Closes the channel. Causes a pending \f(CW\*(C`recv\*(C'\fR on the other end to return undef
or the queued \f(CW\*(C`on_eof\*(C'\fR callbacks to be invoked.
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
