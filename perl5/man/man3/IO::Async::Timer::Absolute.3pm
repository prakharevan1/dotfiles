.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "IO::Async::Timer::Absolute 3pm"
.TH IO::Async::Timer::Absolute 3pm 2025-03-06 "perl v5.40.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH NAME
"IO::Async::Timer::Absolute" \- event callback at a fixed future time
.SH SYNOPSIS
.IX Header "SYNOPSIS"
.Vb 1
\&   use IO::Async::Timer::Absolute;
\&
\&   use POSIX qw( mktime );
\&
\&   use IO::Async::Loop;
\&   my $loop = IO::Async::Loop\->new;
\&
\&   my @time = gmtime;
\&
\&   my $timer = IO::Async::Timer::Absolute\->new(
\&      time => mktime( 0, 0, 0, $time[3]+1, $time[4], $time[5] ),
\&
\&      on_expire => sub {
\&         print "It\*(Aqs midnight\en";
\&         $loop\->stop;
\&      },
\&   );
\&
\&   $loop\->add( $timer );
\&
\&   $loop\->run;
.Ve
.SH DESCRIPTION
.IX Header "DESCRIPTION"
This subclass of IO::Async::Timer implements one-shot events at a fixed
time in the future. The object waits for a given timestamp, and invokes its
callback at that point in the future.
.PP
For a \f(CW\*(C`Timer\*(C'\fR object that waits for a delay relative to the time it is
started, see instead IO::Async::Timer::Countdown.
.SH EVENTS
.IX Header "EVENTS"
The following events are invoked, either using subclass methods or CODE
references in parameters:
.SS on_expire
.IX Subsection "on_expire"
Invoked when the timer expires.
.SH PARAMETERS
.IX Header "PARAMETERS"
The following named parameters may be passed to \f(CW\*(C`new\*(C'\fR or \f(CW\*(C`configure\*(C'\fR:
.SS "on_expire => CODE"
.IX Subsection "on_expire => CODE"
CODE reference for the \f(CW\*(C`on_expire\*(C'\fR event.
.SS "time => NUM"
.IX Subsection "time => NUM"
The epoch time at which the timer will expire.
.PP
Once constructed, the timer object will need to be added to the \f(CW\*(C`Loop\*(C'\fR before
it will work.
.PP
Unlike other timers, it does not make sense to \f(CW\*(C`start\*(C'\fR this object, because
its expiry time is absolute, and not relative to the time it is started.
.SH AUTHOR
.IX Header "AUTHOR"
Paul Evans <leonerd@leonerd.org.uk>
